#!/usr/bin/env ruby

# (C) Copyright Greg Whiteley 2013
#
#  This is free software: you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as
#  published by the Free Software Foundation, either version 3 of
#  the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'pathname'
require 'enumerator'
require 'upbuild'

include Upbuild

path = find_build_path(Dir.getwd)
if !path
  $stderr.puts "Couldn't find path to build from"
  exit 1
end

build_file = path + BUILD_FILE

commands, opts = read_commands(build_file, ARGV)

ret_val = -1
if commands.length < 1
  $stderr.puts "No commands found"
end

if opts[:print]
  commands.each do |command|
    puts "#{command.command} #{command.args.join(' ')}"
  end
  exit 0
end

# normalise the path, so the path remains valid inside
# the .chdir scope
path = path.realpath

def chdir(path, opts)
  prev = Pathname(Dir.getwd).realpath
  Dir.chdir(path) do
    if path.realpath != prev.realpath
      puts "upbuild: Entering directory `#{path}'" unless opts[:quiet]
    end
    yield
  end
end

chdir(path, opts) do

  commands.each  do  |command|
    puts [command.command, command.args] if $DEBUG

    sub_path = path
    # handle @cd by changing path if specified
    cd_path = nil
    cd_path = command.opts.fetch(:cd, nil) if command.opts
    unless cd_path.nil?
      cd_path = Pathname(cd_path)
      if cd_path.exist?
        cd_path = cd_path.realpath
      else
        exit(-5)
      end
    end

    # Support recursive upbuild by dropping back a level if command is
    # 'upbuild'
    if command.command == 'upbuild'
      # for cd_path, with upbuild, don't do the recurse step
      # so we can redirect using `upbuild @cd=...`
      unless cd_path.nil?
        sub_path = cd_path
        # also avoid recursing
      else
        sub_path = path + '..'
      end
      if sub_path.realpath == path.realpath
        $stderr.puts "Refusing to recurse into same directory"
        next
      end
    else
      # otherwise just take the alternate path
      sub_path = cd_path unless cd_path.nil?
    end

    chdir(sub_path, opts) do

      result = nil
      begin

        pid = Process.spawn(command.command, *command.args);
        result = Process.wait2(pid)

        if result.nil?
          ret_val = -2
        end
      rescue Errno::ENOENT => e
        $stderr.puts "#{command.command}: command not found"
        result = nil
        ret_val = -4
      rescue Interrupt => e
        # Ctrl-C pressed, close gracefully
        result = nil
        ret_val = -1
      end

      if result
        status = result.last

        if status.signaled?
          ret_val = 0 - status.termsig
          $stderr.puts status.to_s
        else
          ret_val = status.exitstatus
        end

        puts "returned => #{ret_val}" if $DEBUG

        # check for a remapped return value
        if command.opts and command.opts[:retmap]
          begin
            map = parse_retmap(command.opts[:retmap])
            if map.member?(ret_val)
              ret_val = map[ret_val]
              puts "remapped => #{ret_val}" if $DEBUG
            end
          rescue ArgumentError
            $stderr.puts "Unable to parse '@retmap=#{command.opts[:retmap]}'"
            ret_val = -3
          end
        end
      end

      if command.opts and command.opts[:outfile]
        outfile = Pathname(command.opts[:outfile])
        if outfile.exist?
          File.open(outfile, "r") do |f|
            f.each_line do |l|
              puts l
            end
          end
        end
      end

      exit(ret_val) if ret_val != 0
    end
  end
end
exit(ret_val)
